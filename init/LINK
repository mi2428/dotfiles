#!/usr/bin/env python3
from glob import glob
from os import path, listdir, makedirs, symlink, remove
import argparse

HOMEDIR = path.expanduser("~")
CURDIR = path.dirname(path.abspath(__file__))
DOTFILES = path.join("/", path.relpath(path.join(CURDIR, ".."), "/"))

XDG_SUPPORTED_PACKAGES = [
    "compton", "dusnt", "gtk-3.0", "karabiner", "nvim", "psd", "rofi", "systemd"
]


def get_avail_patches():
    hostsdir = path.join(CURDIR, "../etc/hosts")
    return listdir(hostsdir)


def get_symlinks(basedir, excludes=[]):
    packages = [d for d in listdir(basedir) if d not in excludes]
    links = []

    for package in packages:
        srcdir = path.join(basedir, package)
        srcpaths = [p for p in glob(path.join(srcdir, "**", "*"), recursive=True) if path.isfile(p)]

        for srcpath in srcpaths:
            relpath = path.relpath(srcpath, srcdir)
            subdir = path.dirname(relpath)

            is_xdg_supported = package in XDG_SUPPORTED_PACKAGES
            dstdir = HOMEDIR
            dstpath = None
            if is_xdg_supported:
                dstdir = path.join(dstdir, ".config", package)
                if subdir:
                    dstdir = path.join(dstdir, subdir)
                dstpath = path.join(dstdir, path.basename(srcpath))
            else:
                srcbase = path.basename(srcpath)
                if subdir:
                    dstdir = path.join(dstdir, f".{subdir}")
                    dstpath = path.join(dstdir, srcbase)
                else:
                    dstpath = path.join(dstdir, f".{srcbase}")

            links.append([srcpath, dstdir, dstpath])
    return links


def create_symlinks(basedir, excludes=[], force=False, dry=False):
    links = get_symlinks(basedir, excludes=excludes)
    for link in links:
        srcpath, dstdir, dstpath = link
        print(f"ln -snf {srcpath} {dstpath}")
        if dry:
            continue
        if path.exists(dstpath):
            if not force:
                continue
            remove(dstpath)
        makedirs(dstdir, exist_ok=True)
        symlink(srcpath, dstpath)


def remove_symlinks(basedir, excludes=[], dry=False):
    links = get_symlinks(basedir, excludes=excludes)
    for link in links:
        _, _, dstpath = link
        print(f"unlink -f {dstpath}")
        if dry:
            continue
        if path.exists(dstpath):
            remove(dstpath)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="create or remove symbolic links to $HOME/dotfiles")
    parser.add_argument("--patch", dest="patch", help="overwrite default configs", choices=get_avail_patches())
    parser.add_argument("--force", dest="force", help="force overwrite existing files", action="store_true")
    parser.add_argument("--unlink", dest="unlink", help="unlink all symbolic links", action="store_true")
    parser.add_argument("--dry", dest="dryrun", help="show ln commands and exit (dryrun)", action="store_true")
    args = parser.parse_args()

    if args.unlink:
        remove_symlinks(path.join(DOTFILES, "etc"), dry=args.dryrun)
        for patch in get_avail_patches():
            patchdir = path.join("etc", "hosts", patch)
            remove_symlinks(path.join(DOTFILES, patchdir), dry=args.dryrun)
    else:
        create_symlinks(path.join(DOTFILES, "etc"), excludes=["hosts"], force=args.force, dry=args.dryrun)
        if args.patch:
            patchdir = path.join("etc", "hosts", args.patch)
            create_symlinks(path.join(DOTFILES, patchdir), force=True, dry=args.dryrun)

